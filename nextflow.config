/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    icgc_mutational_signature_workflow Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// main script

manifest {
    name            = 'icgc_mutational_signature_workflow'
    author          = 'ICGC-ARGO Mutational Signature Team'
    homePage        = 'https://github.com/biolancer/icgcdev_mutsig_wf' //adapt if required
    description     = 'Mutational Signature Analysis workflow for ICGC-ARGO'
    mainScript      = 'main.nf'
    nextflowVersion = '>=21.10'
    version         = '1.1dev'
    doi             = '...'
}


// Define parameters if non default

params {
    input                      = null
    outdir                     = null
    output                     = null
    cpus                       = null
    mem                        = null
    do_refinstall              = null
}



// Lookup default configs and import container profile information if nothing else is defined

includeConfig "./conf/params.config"
includeConfig "./conf/profiles.config"

// Load modules.config for DSL2 module specific options -- NOTE: I think this isn't yet required...
// includeConfig "./conf/modules.config"



// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}


/*
---------------------------------------------------------------------------------------------------------------
#####           Maintenance routines for CPU usage checks and reporting             #####

These have been mostly taken without change from the nf-core created nextflow.config file
---------------------------------------------------------------------------------------------------------------
*/


// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    overwrite = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    overwrite = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    overwrite = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    overwrite = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
// Sourced from the standard nextflow.config

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
